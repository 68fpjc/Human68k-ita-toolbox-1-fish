apply [ -<N> ] <コマンド> [ <引数> ... ]

　<引数> ... から 1組の引数を順に取り出し <コマンド> に付加して実行します．
　1組の引数の数は <N> で指定します．これが指定されていない場合には <引数> 1
　つが 1組となります．<引数> ... の単語数は <N> の整数倍でなければなりませ
　ん．特別な場合として <N> が 0 である場合には，<コマンド> は付加引数なしで
　<引数> ... の数だけ繰り返し実行されます．

　<コマンド> はシェルの入力行として解析され，履歴置換から始まる一連のシーケ
　ンスが適用されます．ここで，!! は直前の履歴イベントではなく，渡された 1組
　の引数を参照します．ただし !! には必ず単語選択子を指定しなければなりませ
　ん．そこで使用できる単語選択子は :n または :n-m の形式に限られます．:-n，
　:n-，:n*，:* などの形式を使用することはできません．さらに，ここで n およ
　び m としては 1 以上の数値かまたは 1番目の単語を表す ^ のみが許されます．
　0，$，%，* を使用することはできません．一般的には，\!:1，\!:2，... という
　形式で引数を参照することになります．<コマンド> 内に !! による引数の参照が
　ある場合には，<コマンド> の後ろに引数は付加されません．また，<コマンドに
　渡す引数の数> は無視され，<コマンド> 内で参照している引数の番号の最大値が
　1組の引数の数となります．

　<コマンド> は 1単語として記述しなければなりません．複数の単語で構成される
　コマンドにはクオーティングが必要です．いずれにしても <コマンド> 内のメタ
　キャラクタが <コマンド> 実行前に働くのを防ぐため，複雑なコマンドは単一引
　用符‘'’で囲むのがベストです．さらに，<コマンド> 内の履歴置換は‘\’でエ
　スケープしておかなければなりません．

　例：
　　apply echo *

　は ls -1 と同じ結果となります．

　　apply -2 FC.X a1 b1 a2 b2 ...

　は a1 と b1，a2 と b2，... を比較していきます．

　　apply CHKDSK.X A: B: C:

　は A，B，C ドライブをそれぞれ検査します．

　　apply -0 'CHKDSK.X A:' 1 2 3 4 5

　は repeat 5 CHKDSK.X A: と同じ結果となります．

　　apply 'if (-f \!:1 && timeof \!:1 > timeof B:\!:1) cp -p \!:1 B:' .* *

　は現在の作業ディレクトリ上にあるすべてのファイルのうち Bドライブ上の同名
　のファイルよりも新しいものを Bドライブにコピーします．



