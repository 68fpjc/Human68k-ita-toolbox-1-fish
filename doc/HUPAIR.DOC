
          Human68k での引数インターフェースについての提案


-------------------------------------------------------------------
１．現状の問題


     Human68k では，ユーザ・プログラムに対する引数は“コマンドラ
     イン”と呼ばれる構造で渡すことになっています．そのコマンドラ
     インは，“先頭 1バイトで文字列の大きさ（バイト数）を示し，2
     バイト目から文字列を置く．文字列の終わりには $00 をつける．”
     という構造であることが規定されています．

     このインターフェースには次の 2つの問題があります．



     （問題１） 255バイトを超える引数を渡すことができない．



     文字列は $00 で終端することになっていますし，DOSファンクショ
     ン exec はコマンドラインのアドレスをそのまま親プロセスから子
     プロセスに中継するだけで，コマンドラインの長さやその内容につ
     いては関知しませんから，実際にはどんなに長い文字列でも渡すこ
     とができます．

     しかしながら，既存のユーザ・プログラムには，コマンドラインの
     1バイト目から文字列の長さを得たり，あるいは，それが 0 である
     かどうかで引数の有無を判断したりするものがありますし，渡され
     る文字列が 255バイト以下であることを前提にして作成されたユー
     ザ・プログラムも少なくないため，255バイトを越える引数を渡す
     ことができません．



     （問題２） 1つの文字列しか渡すことができない．



     この問題は，引数リストを空白でつないで 1つの文字列にしてやり
     とりするという方法で解決されてきました．しかし，その場合，空
     白を含む引数を保存するためにエスケーピングを行う必要があるわ
     けですが，残念ながらその方法についての明確な規定は無く，各ユー
     ザ・プログラム作成者がそれぞれ独自の方法で行っているために，
     コマンドごとに引数インターフェースの仕様がばらばらになってし
     まっています．その結果，



               引数が期待通りに解釈される保証は無い．



     という新たな問題が発生しています．


-------------------------------------------------------------------
２．解決への糸口


     （問題１）は，これから作成されるユーザ・プログラムに関しては
     容易に解決することができます．コマンドラインの文字列の長さは
     本来は制限されてませんので，コマンドラインの 1バイト目は無視
     し，引数の終わりを $00 で判断するようにすれば，255バイト以上
     の引数をやりとりすることが可能です．

     しかし，子プログラムを起動する親のプログラムは，相手を選ばず
     に255バイト以上の文字列を渡すわけにはいきません．既存のユー
     ザ・プログラムのなかには，コマンドラインの文字列が255バイト
     以内であることを前提として作成されているため255バイトを越え
     ていると何らかの障害を引き起こすものも少なくありませんから，
     そういったプログラムを起動する際にはコマンドラインの文字列の
     長さを255バイトに制限しなければならないでしょう．

     そこで，『起動しようとするプログラムが255バイトを越える引数
     を正常に受け取ることができるかどうか』を知ることができる仕組
     みも同時に提案したいと思います．

     次は（問題２）についてです．Human68k で規定されている引数イ
     ンターフェースは次のようなものです．
     +========================================================+
     |                                                        |
     |（親プログラム）     コマンドライン                     |
     |                           ↓                           |
     |                        *------*                        |
     | - - - - - - - - - - -  | exec |  - - - - - - - - - - - |
     |                        *------*                        |
     |                           ↓                           |
     |（子プログラム）     コマンドライン                     |
     |                                                        |
     +========================================================+
     （ここでの exec は，DOSファンクション $FF4B を表わしています）

     これでは 2つ以上の引数を連ねた引数リストを渡すことができない
     ため，現在すでに
     +========================================================+
     |                                                        |
     |                       引数リスト                       |
     |                           ↓                           |
     |                     *------------*                     |
     |                     | エンコード |                     |
     |                     *------------*                     |
     |                           ↓                           |
     |（親プログラム）     コマンドライン                     |
     |                           ↓                           |
     |                        *------*                        |
     | - - - - - - - - - - -  | exec |  - - - - - - - - - - - |
     |                        *------*                        |
     |                           ↓                           |
     |（子プログラム）     コマンドライン                     |
     |                           ↓                           |
     |                      *----------*                      |
     |                      | デコード |                      |
     |                      *----------*                      |
     |                           ↓                           |
     |                       引数リスト                       |
     |                                                        |
     +========================================================+
     といった拡張を行って引数リストの受け渡しを行うのが一般的になっ
     ています．しかし，このエンコードとデコードの動作について明確
     な規定は無く，エンコードした結果が正しくデコードされる保証は
     ありません．

     そこで，このエンコード／デコードの規格を取り決めることを提案
     したいと思います．なお，この規定の草案を作成するにあたっては，
     既存のユーザ・プログラムを使う上で不都合が少ないように配慮し
     たつもりです．


-------------------------------------------------------------------
３．インターフェース規定の提案


     以上の考察を取り纒めて次のインターフェース規定を提案します．

     ------------------------------------------------------------
     |   Human68k ユーザ・プログラム 引数インターフェース規定   |
     |   Human68k User Program Argument Interface Regurations   |
     |                                                          |
     |                    【 H U P A I R 】                     |
     |                                                          |
     |                         （案）                           |
     ------------------------------------------------------------

                       24 Aug. 1991  板垣 史彦


      この規定は，Human68kにおいてユーザ・プログラムからユーザ・
      プログラムを起動する際の「引数リスト」の受け渡し法を規定す
      る．ここで「引数」とは$00で終端された 1つの文字列を言い，
      「引数リスト」とは0個以上の引数が順序を持って集合したもの
      を言う．


      (1) ユーザ・プログラムに渡す引数の数は0個以上32766個以下と
          定める．

      (2) ユーザ・プログラムに渡す引数リストの各引数のサイズの合
          計は32767バイト以下でなければならない．

      (3) ユーザ・プログラムに対する引数リストは$00で終端された単
          一の文字列にエンコードし，コマンドラインとして渡すもの
          とする．

      (4) ユーザ・プログラムに渡すコマンドラインの文字列の長さは
          終端の$00を含めて32767バイト以下でなければならない．

      (5) ユーザ・プログラムに渡すコマンドラインを作成する際，コ
          マンドラインの1バイト目には続く文字列のバイト数（終端の
          $00の分は含まない）を格納する．ただしそれが255を超えて
          いる場合には255（$FF）を格納する．

      (6) 受け取ったコマンドラインの文字列をデコードする際には，
          コマンドラインの1バイト目の情報は無視し，コマンドライン
          の文字列の長さや引数の有無はコマンドラインの文字列の終
          端の$00を探すことによって調べなければならない．

      (6) 引数リストから単一の文字列へのエンコードは，基本的には
          引数をその順序どおりにそのまま連結することによって行い，
          引数と引数との間には 1文字以上のスペース（$20）を挿むも
          のとする．エンコードされたコマンドラインを受け取ったユー
          ザ・プログラムは，1文字以上連続しているスペース（$20）
          を1つの区切りとして引数リストに分解するものとする．

      (7) 引数リストを単一の文字列にエンコードする際，引数がスペー
          ス（$20）を含む場合には，その空白文字を含む部分を［"］
          （ダブル・クオーテーション）の対か，または［'］（シング
          ル・クオーテーション）の対で囲む．また，空の引数も［"］
          または［'］の対による囲みによって表わす．

      (8) 引数リストを単一の文字列にエンコードする際，引数が文字
          〔"〕を含む場合には，その文字〔"〕を含み，かつ文字〔'〕
          を含まない部分を［'］で囲む．

      (9) 引数リストを単一の文字列にエンコードする際，引数が文字
          〔'〕を含む場合には，その文字〔'〕を含み，かつ文字〔"〕
           を含まない部分を［"］で囲む．

     (10) 引数をエンコードした文字列中，［"］または［'］で囲われ
          た中の文字はすべて引数の一部であり，決して特別な意味を
          持つものは無い．

     (11) コマンドラインの文字列をデコードして引数リストに分解す
          る際，［"］や［'］による囲みがある場合には，その［"］ま
          たは［'］に囲われた中のすべての文字を引数の一部として保
          存し，その［"］または［'］は削除する．

     (12) コマンドラインの文字列をデコードして引数リストに分解す
          る際，［"］または［'］が閉じていない場合には文字列の最
          後までを 1つの引数とする．

          (補足) このようなことは本来はあってはならないことで
                 すが，もしもあった場合のデコード法を規定する
                 ものです．

     (13) ユーザ・プログラムは，渡されたコマンドラインの先頭から
          その文字列の終端の$00までの範囲の内容を書き換えても良い．

          (解説) ユーザ・プログラムに渡されるコマンドラインは
                 環境と同様親プロセスのものですので，本来は書
                 き換えを許すべきではありませんが，ユーザ・プ
                 ログラムの手間を抑え，また，メモリを節約する
                 ために許可することにしました．


-------------------------------------------------------------------
４．HUPAIR適合プログラム判別法の提案


     『プログラム実行開始アドレス+2 からの 8バイトのコードが
     "#HUPAIR",0 であれば HUPAIR適合プログラムである』とします．
     *.X ファイルならば

            START:   BRA.S   START1
                     DC.B    '#HUPAIR',0
            START1:
                         .
                         .
                         .
                     .END    START

     とすれば良いわけです．もちろん *.R ファイルでも同様ですが，
     *.R ファイルでは，START は プログラムの先頭でなければなりま
     せん．

     この情報を利用して，ユーザ・プログラムを起動する際にプログラ
     ムが HUPAIR適合プログラムであるかどうかを判断することができ
     ます．コマンドラインの文字列が255バイトを越えている場合には，
     もしプログラムが HUPAIR適合プログラムでないならば起動を断念
     するのが無難でしょう．強引に255バイト以上の文字列を渡すと重
     大な障害を引き起こすかも知れません．

     さらに，文字列が255バイト以内であっても，起動するプログラム
     が HUPAIR適合プログラムでないならば，引数のデコードが期待ど
     おりに行われないことは覚悟しなければなりません．

     もしも，いつの日にかすべてのユーザ・プログラムが HUPAIR適合
     プログラムとなったならば，このような判別を行う必要は無くなり
     ます．HUPAIR適合化を推進しましょう．:-)


-------------------------------------------------------------------
５．エンコーダ／デコーダの提供


     FISH の配布パッケージには，上記の HUPAIR規格案にしたがったエ
     ンコーダ EncodeHUPAIR / SetHUPAIR と，デコーダ DecodeHUPAIR
     のソース・コードを同梱してありますので，ご利用ください．この
     DecodeHUPAIR を使用し，上記の HUPAIR適合宣言を行えば，FISH
     からの引数を間違い無く受け取ることができるようになります．た
     だし，一般公開するプログラムに組み込むのは HUPAIR規格案が
     fix されてからにするのが無難でしょう．

     なお，EncodeHUPAIR / SetHUPAIR と DecodeHUPAIR はアセンブリ・
     レベルのサブルーチンです．C への適用はまだ行われていません．


-------------------------------------------------------------------
６．FISH の引数インターフェースについて


     FISH は入力行を単語に分解して，組み込みのコマンドに対しては
     その単語リストを引数として渡しますが，ディスク上のコマンドに
     対しては単語リストを上記の HUPAIR の取り決めにしたがってコマ
     ンドライン上にエンコードした上で渡します．
     +--------------------------------------------------------+
     |                                                        |
     |                         入力行                         |
     |                           ↓                           |
     |          *----------------------------------*          |
     |          | 分解，置換，展開，エスケーピング |          |
     |          *----------------------------------*          |
     |                           ↓                           |
     |                       単語リスト____________           |
     |                           ↓               ↓          |
     |                     *------------* （組み込みコマンド）|
     |                     | エンコード |                     |
     |                     *------------*                     |
     |                           ↓                           |
     |（FISH）             コマンドライン                     |
     |                           ↓                           |
     |                        *------*                        |
     | - - - - - - - - - - -  | exec |  - - - - - - - - - - - |
     |                        *------*                        |
     |                           ↓                           |
     |（子プログラム）     コマンドライン                     |
     |                           ↓                           |
     |                      *----------*                      |
     |                      | デコード |                      |
     |                      *----------*                      |
     |                           ↓                           |
     |                       引数リスト                       |
     |                                                        |
     +--------------------------------------------------------+

     引数をエンコードした結果，コマンドラインの文字列が255バイト
     を越えた場合には子プログラムを調べ，HUPAIR適合プログラムであ
     れば起動しますが，そうでなければ，デフォルトでは子プログラム
     を起動せずにエラーとします．コマンドラインの文字列が255文字
     以内であれば無条件に起動します．子プログラムが引数を正しくデ
     コードするかどうかについては関知しません．


-------------------------------------------------------------------
７．最後に


     ここまで読んでこられた方は拍子抜けしているかも知れません．け
     れどもこんな基本的なことが曖昧になっているために余計な苦労を
     重ねてはいないでしょうか．（早い話私は， FISH でせっかく引数
     リストを作っても，それが必ずしも正しくコマンドに伝わらないか
     もしれないという現実を解消したかったわけです）．

     誤解の無いように付け加えますが，HUPAIR は FISH専用コマンドを
     作成する規格ではありません．また，ユーザ・プログラムを FISH
     対応にするため*だけ*のものでもありません．HUPAIR に従って作
     成されたプログラムは，COMMAND.X からも他のシェルからも実行す
     ることができます．その上，FISH をはじめとする《HUPAIRに従っ
     たプログラム》からは，大きな引数を安全に，かつ正確に受け取る
     ことができるわけです．このことは規定の内容を念入りにお読みに
     なればご理解いただけると思います．

     ぜひ，この提案に対するご意見をお願いします．また，日本語がお
     かしいとか，記述が不完全だとか，そういう部分がありましたら，
     それも指摘してください．


     ＃ 意見がちっとも出なかったらどうしよう・・・ (^^;



             いたう  /  BADDEST JAPANESE ＩＴＡＨＫＩ --     板垣 史彦    
       ^^                      o ∞§__§§∞             Itagaki Fumihiko
  ^^                         ∞ §§     |§§                            
         ^^                ∞§ §| 〇^〇 |§§           ita@hudson.co.jp
_ _ __  _ _  _  __ _ _    §§ § ;   ゝ  ;§ §     NIFTY-Serve: QGB02101
 -_ _- _ - -_ -- _ _-    § § §  ;.""".;  § §      ASCII-pcs: pcs35383
- __ -_- -_ - _- -__-       § §   ;;;;;   § §         PC-VAN: GNM14305
_- __-_ - -_ - -- -_       § §            §              南京: 176     
                                                AfricanHeadMedia: JAH00223
