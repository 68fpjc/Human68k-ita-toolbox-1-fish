Title Title Title Title Title Title Title Title Title Title Title Title Title 
le Title Title Title Title Title Title Title Title Title Title Title Title Tit
Titl　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　tle 
le T　　　　　　　　　　　　Ｅｘｔ　ｍａｌｌｏｃ　　　　　　　　　　　　　 Tit
Titl　　　　　　　　for fish.x, ksh.x, zsh.x and dis.x　　　　　　　　　　tle 
le T　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 Tit
Titl　　　　　　　　　　　　　　９３／３／２１　　　　　　　　　　　　　　tle 
le T　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 Tit
Title Title Title Title Title Title Title Title Title Title Title Title Title 
le Title Title Title Title Title Title Title Title Title Title Title Title Tit


　fish.x の下請け用、allocate_memory_reg_saved free_memory_reg_saved 及び、
ksh.x zsh.x 及び dis.x の下請け用 malloc , free と realloc です。


　local BBS を使う（fish.x 専用）場合

allocate_memory:
allocate_memory_reg_saved:
realloc_memory:
realloc_memory_reg_saved:
free_memory:
free_memory_reg_saved:
free_all_memory:
free_all_memory_reg_saved:
dumpout_memory:
dumpout_memory_reg_saved:

のアセンブララベルが使えます。

　local BBS を使わず、ただひとつの lake chain を利用する（ksh.x 及び zsh.x 専用）
場合

C 言語の関数

extern void *malloc(int size);
extern void *realloc(void *ptr, int size);
extern int free(void *ptr);

が使えます。

　これらを利用する為には、ライブラリ Extmalloc.a をリンクして下さい。

　それぞれの説明に移ります。



allocate_memory:
	入力レジスタ
		d0	必要なメモリーサイズ
		a5	loca BSS へのポインタ
	出力レジスタ
		d0	確保されたメモリーのアドレス
	破壊レジスタ
		d1,d2,d3,d4,d5,d7,a0,a1,a2,a4,a6

	確保できるメモリーのひとつあたりの最大サイズには制限は有りません。その
	実現方法は、0x4000 以下のサイズは従来の方法で、それ以上のサイズは、そ
	のメモリーエリア単独で一つの特殊な lake を構成させる（従来から lake 自
	身は、どんなサイズでも OK だった）わけです。0x4000 バイト以下の場合は、
	４Ｋバイト単位で REALLOC を使って、ＯＳからメモリーを確保します。最初
	は、十数バイトからはじめるので、（ＯＳの）サイズの小さいフリーエリアか
	ら最終的にはそのサイズいっぱいになるまで、成長し続けることになります。
	メモリーが足りない等のエラーが発生したら、エラーコード -1 をレジスタ
	d0 にいれて返って来ます。

allocate_memory_reg_saved:
	入出力に関係ないレジスタを保存する以外は、allocate_memory とおなじです。


realloc_memory:
	入力レジスタ
		d0	リアロックしたいメモリーのアドレス
		d1	必要なメモリーサイズ
		a5	loca BSS へのポインタ
	出力レジスタ
		d0	確保されたメモリーのアドレス
	破壊レジスタ
		d1,d2,d3,d4,d5,d6,d7,a0,a1,a2,a3,a4,a6

	d1 のサイズのメモリを確保し、d0 で与えられた領域からコピーしてきます。
	オリジナルの領域は free_memory してしまいます。

realloc_memory_reg_saved:
	入出力に関係ないレジスタを保存する以外は、realloc_memory とおなじです。


free_memory:
	入力レジスタ
		d0	確保されたメモリーのアドレス
		a5	loca BSS へのポインタ
	出力レジスタ
		d0	エラーコード
	破壊レジスタ
		d7,a1,a2,a4,a6

	上述のメモリー確保ルーチンで確保したメモリーを開放する為のルーチンです。
	エラーコードは -1 のみで、重大なエラーが発生した事を示します。プログラ
	ミング上の不具合の可能性があるので、プログラムを続行するべきではありま
	せん。


free_memory_reg_saved:
	入出力に関係ないレジスタを保存する以外は、free_memory とおなじです。


free_all_memory:
	入力レジスタ
		a5	loca BSS へのポインタ
	出力レジスタ
		d0	エラーコード
	破壊レジスタ
		d7,a1,a4,a6

	上述のメモリー確保ルーチンで確保したメモリーを総べて開放する為のルーチ
	ンです。エラーコードは -1 のみで、重大なエラーが発生した事を示します。
	プログラミング上の不具合の可能性があるので、プログラムを続行するべきで
	はありません。


free_all_memory_reg_saved:
	入出力に関係ないレジスタを保存する以外は、free_all_memory とおなじです。


おまけに、process.x みたいにメモリーの確保状況を標準出力に出すサブルーチンを加
えておきます。デバッグ用に用意しました。

dumpout_memory:
	入力レジスタ
		a5	loca BSS へのポインタ
	出力レジスタ
		無し
	破壊レジスタ
		d0,d1,d2,a0,a1,a2,a4,a6

dumpout_memory_reg_saved:
	入出力に関係ないレジスタを保存する以外は、dumpout_memory とおなじです。




　Ｃインターフェース用に、_malloc _realloc _free も用意しました。それぞれ
allocate_memory realloc_memory free_memory のＣ版です。

extern void *malloc(int size);
extern void *realloc(void *ptr, int size);
extern int free(void *ptr);

というインターフェースになります。これらは local BBS へのポインタを内部でお互いに
共有して、全体でひとつの lake chain をサポートします。ksh.x 及び zsh.x 専用です。


−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−

ｈｉｓｔｏｒｙ

ｖｅｒ０．０１

　allocate_memory_reg_saved のセーブレジスタに d2 を追加しました。

　a5 を local BBS area へのポインタに開放し、lake_top を a5 relative にしまし
た。

　大きいサイズ（0x4000 バイト以上）のメモリーは、それ自信だけで lake を構成す
るようにし、実現可能としました。

　MFREE に関しては、大きいサイズは、そのまま直ぐにＯＳに返し、小さいサイズに関
しては、従来通り、ＯＳには返さない方法を取りました。

ｖｅｒ０．０２

　すべてのサイズについて、無駄な（４Ｋbytes 単位で）エリアをＯＳに返します。空
になった湖も即座に返還します。

ｖｅｒ０．０３

　FREEALL をサポート

ｖｅｒ０．０４

　C インターフェースをサポート

ｖｅｒ０．１０

　2 バイトしか確保出来なかった場合は、エラーとする

ｖｅｒ０．１１

　忘れた


ｖｅｒ０．１２

　ksh.x にも対応化

ｖｅｒ０．１３

　C ライブラリの名前付け間違い修正 mfree -> free

ｖｅｒ０．１４

　realloc を追加

ｖｅｒ０．１５

　shrink_lake のバグフィックス

バグ説明
　lake の最後の free pool を小さくして lake を縮める作業に失敗し、
最後に broken free pool を作ってしまう事がある。

バグ症状
　これが起こると is_previous_free がハングアップする。

バグ回避
　shrink_lake にて、今まで ４Ｋbytes の倍数単位で lake を縮めていた
のを、今後は、最後に free pool が ４Ｋbytes 以上有った時にそれを全部
解放する様に変更した。そうすれば、２bytesの free pool (即ち broken
free pool) は出来得ない。

ｖｅｒ０．１６

　realloc にて、1 〜 2 バイトの領域を拡大しようとした場合に暴走する
状況をフィックス

ｖｅｒ０．１７

　alloc, realloc でサイズ 0 の領域を要求されたら、サイズ 1 の領域を返す。

ｖｅｒ０．１８

　realloc のエンバグ（テストしていないことがばればれである。）を
フィックス。




　　　　　　　　　　　　　　Ｎifty-Ｓerve   NAH00720   Ｅｘｔ
　　　　　　　　　　　　　　Ｅ-Ｍail  kawamoto@miln.mei.co.jp
　　　　　　　　　　　　　　　　　　　　　　　川本琢二
