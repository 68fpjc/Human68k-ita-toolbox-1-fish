● Human68k では…

  Human68k では、ユーザー・プログラムに対する引数を次の
ように規定しています。

     (1) ユーザー・プログラムにはコマンドラインのアドレ
         スを渡す。

     (2) コマンドラインの先頭の 1バイトで文字列のバイト
         数を示し、その長さの文字列がコマンドラインの 2
         バイト目からのアドレスに格納されているものとす
         る。

このインターフェースには次の 2つの問題があります。

     (1) 255バイトを超える引数を渡すことができない。

     (2) 1つの文字列しか渡すことができない。

  上記(2)の問題は、渡されたたった1つの文字列をさらに分
解して目的の引数リストを得るという伝統的な手法で解決さ
れてきましたが、ここでまた新たな問題が発生することにな
ります。引数を分解する処理は各ユーザー・プログラムが行
うことになりますので、引数解釈のシンタックスがプログラ
ム毎にまちまちです。せっかくシェルがユーザー・プログラ
ムのために引数リストを作成しても、それがうまくユーザー・
プログラムに伝わることは保証されません。そこで、次のよ
うなインターフェースを標準として取り決めることを提案し
ます。

+-------------------------------------------------------+
|     Human68k ユーザー・プログラム                     |
|                                                       |
|     引数インターフェースの標準仕様（案）              |
|                                                       |
|     板垣 史彦                                         |
+-------------------------------------------------------+

(1) コマンドラインの 2バイト目から始まる文字列の直後に
    1バイトの $00 が置かれているものとし、この $00 の直
    前までを引数とする。

    (解説) $00 を含む文字列は引数として渡せない

(2) コマンドラインの先頭の 1バイトは文字列のバイト数を
    示す。ただし、文字列が255バイトを超えている場合には
    255が格納されているものとする。

    (解説) 既存のユーザー・プログラムには、コマンドライ
           ンの先頭の 1バイトから文字列の長さを得ている
           ものも存在していますので、ユーザー・プログラ
           ムを起動するプログラムは、コマンドラインの先
           頭の 1バイトに文字列のバイト数をセットしてお
           かなければなりません。

           これから作成されるユーザー・プログラムは、コ
           マンドラインの先頭の 1バイトは無視して、文字
           列の終わりを文字列に続いて置かれている $00
           で判断するべきです。

(3) 引数リストは 1文字以上の空白文字で区切られているも
    のとする。ここで、空白文字とは $20（スペース）のみ
    を指す。

     (解説) $09〜$0D も区切り文字とするべきだという議論
            もあるかと思いますが、それは、ユーザー・プ
            ログラムを起動するプログラムが変換すれば済む
            ことです。ユーザー・プログラムの負担を軽減
            するために、区切り文字は $20 のみに限定しま
            す。

            「1文字以上」ではなく 「1文字」とすれば、ユー
            ザー・プログラムの負担はもっと軽くなること
            になりますが、COMMAND.X を始めとする既存の
            プログラムから起動されることを考え、規定を
            「1文字以上」と緩めます。

(4) ‘"’（ダブル・クオーテーション）および‘'’（シン
    グル・クオーテーション）で囲まれた中のすべての文字
    は一切の特別な意味を持たない。

(5) ‘"’や‘'’による囲みがある場合、その‘"’や‘'’
    は削除する。

    (補足) ‘"’や‘'’による囲みがあった場合その囲まれ
           た部分を 1つの引数とするやり方がありますが、
           それだと‘"’と‘'’の両方を含む引数を記述で
           きませんので採用しません。引数の分解はあくま
           でも 1文字以上の空白文字で行うこととし、1つ
           の引数に‘"’や‘'’による囲みを複数適用でき
           るものとします。

(6) クオートが閉じていない場合には文字列の最後までを 1
    つの引数とする。

    (解説) このようなことは本来はあってはならないことで
           すが、もしもあった場合のユーザー・プログラム
           側の対処法を規定するものです。

(7) ユーザー・プログラムを起動する際、空白文字も文字
    ‘'’も含まない部分を‘"’で囲ってはならない。また、
    文字‘"’を含まない部分を‘'’で囲ってはならない。

(8) ユーザー・プログラムは必ずしも‘"’と‘'’による囲
    みをサポートしなくても良い。ただし、空白文字または
    文字‘'’を含む引数が渡される可能性があるものは少な
    くとも‘"’による囲みをサポートしなければならない。
    また、‘"’を含む引数が渡される可能性があるものは少
    なくとも‘'’による囲みをサポートしなければならない。

    (解説) (7)と(8)はユーザー・プログラムの負担を最小に
           抑えるために規定するものです。

(9) ユーザー・プログラムは、渡されたコマンドラインの内
    容を書き換えてはならない。

    (解説) ユーザー・プログラムに渡されるコマンドライン
           は、環境と同様、親プロセスのものですので、書
           き換えを許すべきではありません。
---------------------------------------------------------

  これから作成されるユーザー・プログラムが上記の仕様に
従って作成されることを望みます。



AR.X		SHARP/Hudson		v1.0		○
AS.X		SHARP/Hudson		v2.0		とぶ
ATTRIB.X	?			?		とばないが無意味
BACKUP.X	SHARP/Hudson		Version 1.10	とぶ
BC.X		SHARP/Hudson		v2.00		とぶ
BIND.X		SHARP/Hudson		v1.00		とばないが動作がおかしい
CASE.X		?			?		とぶ
CASH.X		?			?		○
CC.X		SHARP/Hudson		v2.00		とぶ
CHKDSK.X	?			?		○
COMMAND.X	?			version 2.02	255で切られる
