*----------------------------------------------------------------------------
*新ＦＣＢの構造

fcbhct		equ	0	*	dc.b	handoru use count(0 no use)
fcbflag		equ	1	*	dc.b	flags
*				*	bit7=0..file	1..I/O
*				*file	bit6=1..dirty(write flg)
*				*	bit5=1..special drive
*				*	bit4~0..drive($00~$1F)
*				*	0=a:	1=b:
*				*I/O	bit6=1..input EOF
*				*	bit5=1..raw mode
*				*	bit3=1..clock
*				*	bit2=1..null
*				*	bit1=1..console output
*				*	bit0=1..console input
fcbdevadr	equ	2	*	dc.l	devadr(device driver or DPB)
fcbseekpos	equ	6	*	dc.l	seek data pos現在のシーク位置
fcb_share_pos	equ	10	*	dc.l	share_posシェア管理領域のアドレス
fcbopenmd	equ	14	*	dc.b	open_mode
fcbdirno	equ	15	*	dc.b	ディレクトリセクター内何番目
fcbsecfat	equ	16	*	dc.b	データＦＡＴ内セクターオフセット
fcbfatsec	equ	17	*	dc.b	ＦＡＴ先頭からのセクターオフセット
fcbfatpos	equ	18	*	dc.w	data のＦＡＴ番号
fcbdatasec	equ	20	*	dc.l	現在のデータのセクター位置
fcbdataadr	equ	24	*	dc.l	現在のデータのｉｏｂｕｆアドレス
fcbdirsec	equ	28	*	dc.l	ディレクトリのセクター位置
fcbnextpos	equ	32	*	dc.l	next data pos
fcbnm1		equ	36	*	ds.b	8	name1
fcbext		equ	44	*	ds.b	3	ext
fcbatr		equ	47	*	dc.b	atr
fcbnm2		equ	48	*	ds.b	10	name2
fcbtim		equ	58	*	dc.w	time
fcbdat		equ	60	*	dc.w	date
fcbfat		equ	62	*	dc.w	start fat
fcblen		equ	64	*	dc.l	filelen
fcb_fat_buff	equ	68
				*	dc.w	ディスク内ｆａｔ番号1
				*	dc.w	ファイル内ｆａｔ番号1
				*	dc.w	ディスク内ｆａｔ番号2
				*	dc.w	ファイル内ｆａｔ番号2
				*	dc.w	ディスク内ｆａｔ番号3
				*	dc.w	ファイル内ｆａｔ番号3
				*	dc.w	ディスク内ｆａｔ番号4
				*	dc.w	ファイル内ｆａｔ番号4
				*	dc.w	ディスク内ｆａｔ番号5
				*	dc.w	ファイル内ｆａｔ番号5
				*	dc.w	ディスク内ｆａｔ番号6
				*	dc.w	ファイル内ｆａｔ番号6
				*	dc.w	ディスク内ｆａｔ番号7
				*	dc.w	ファイル内ｆａｔ番号7
fcb_buff_end	equ	96
fcb_length	equ	96
*----------------------------------------------------------------------------
*新ＩＯＢＵＦの構造
**Disk I/O Buffer
iobnext	equ	0	*DC.L	次のバッファのポインタ（-1でＥＮＤ）
iob_drv	equ	4	*DC.B	ドライブ
iob_sec	equ	4	*DC.L	セクター番号先頭＋ドライブ*1000000
iobback	equ	8	*DC.L	前のバッファのポインタ（-1でＥＮＤ）
iob_flg	equ	12	*DC.B	フラグ
iob_dpb	equ	12	*DC.L	ＤＰＢのポインタ＋フラグ*1000000
iob_dat	equ	16	*DS.B	128*N（１セクターの最大バイト数分）

*ドライブが＄８０以上の場合未使用バッファとする

*フラグの種類
FRE_PRI	EQU     0		* 使用ずみ
DATAPRI	EQU	$10		* データ用バッファ
DIR_PRI	EQU	$20		* ディレクトリ用バッファ
FAT_PRI	EQU	$40		* ＦＡＴ用バッファ
WRT_PRI	EQU	$80		* 書き込んだバッファ（ＤＡＴＡ，ＤＩＲ，ＦＡＴ）
*----------------------------------------------------------------------------
*新内部ＤＰＢの構造（外部ＤＰＢはｖ１．００と同じ、dpb_fat_shiftはそのままコピー）
**drive parameter block(DPB)
dpb_drv		equ	0	*dc.b	装置番号　0=a: 1=b:
dpb_unit	equ	1	*dc.b	装置ドライバで使うユニット番号
dpb_job		equ	2	*dc.l	装置ドライバへのポインタ
dpb_next	equ	6	*dc.l	次のＤＰＢのポインタ(-1でｅｎｄ)
dpb_sect_bytes	equ	10	*dc.w	１セクタあたりのバイト数(0,128,256,512,1024,2048･･･32768)
**					０は特殊ブロックデバイスドライバーの場合
dpb_min_len	equ	12	***bpbを持たないドライブはここまで
dpb_fat_sect	equ	12	*dc.b	１クラスタあたりのセクタ数―１(0,1,3,7,15,31,63,127)
dpb_fat_shift	equ	13	*dc.b	クラスタ＜＞セクタのシフトカウント(0,1,2,3,4,5,6,7)
				*bit7=onなら２バイトＦＡＴでもＭＳ−ＤＯＳコンパチのlow/highモード
dpb_fat_pos	equ	14	*dc.w	ＦＡＴの先頭セクタ番号（６５５３５以下）
dpb_fat_count	equ	16	*dc.b	ＦＡＴ領域の個数(1,2)
dpb_fat_length	equ	17	*dc.b	ＦＡＴのしめるセクタ数（１２８以下コピーの分は別）
dpb_dir_count	equ	18	*dc.w	ルートディレクトリの個数（２０４８以下）
dpb_data_pos	equ	20	*dc.w	データ部の先頭セクタ番号（６５５３５以下）
dpb_fat_max	equ	22	*dc.w	総クラスタ数＋１
dpb_dir_pos	equ	24	*dc.w	ルートディレクトリの先頭セクタ番号（６５５３５以下）
dpb_media_id	equ	26	*dc.b	メディアバイト
dpb_sect_shift	equ	27	*dc.b	セクタ＜＞バイトのシフトカウント(7,8,9,10,11,12,13,14,15)
dpb_new_fat	equ	28	*dc.w	次に新規作成可能なＦＡＴ値？
dpb_len		equ	30
*----------------------------------------------------------------------------
*新ＢＰＢの構造
**bios parameter block(BPB)
bpbssz equ  0	*dc.w	１セクタあたりのバイト数(128,256,512,1024,2048･･･32768)
bpbclm equ  2	*dc.b	１クラスタあたりのセクタ数(1,2,4,8,16,32,64,128)
bpbftc equ  3	*dc.b	ＦＡＴ領域の個数(1,2)
		*bit7=onなら２バイトＦＡＴでもＭＳ−ＤＯＳコンパチのlow/highモード
bpbfts equ  4	*dc.w	予約領域のセクタ数（６５５３５以下）
bpbdrc equ  6	*dc.w	ルートディレクトリにはいるファイル数（２０４８以下）
bpbmax equ  8	*dc.w	全領域のセクタ数（０の場合はbpb_mxが有効）
bpbmid equ 10	*dc.b	メディア識別コード($fe,$f8,$f9)
bpbfsz equ 11	*dc.b	１個のＦＡＴ領域に使用するセクタ数（１２８以下）
bpb_mx equ 12	*dc.l	全領域のセクタ数（bpbmaxが０の時のみ有効）
*----------------------------------------------------------------------------
*新規ＣＨＤＩＲＢＵＦＦの構造
*
*JOIN C: D:\TEST	[D:\TEST\*.*]は[C:\*.*]をアクセスする。
*			ただし[D:\TEST]以外のファイルはそのまま[D:]をアクセス。
*SUBST C: D:\TEST	[C:\*.*]は[D:\TEST\*.*]をアクセスする。
*
cd_buff		equ	0	*ds.b	69	'A:\TEST',0（現在の物理パス名）
cd_mode		equ	69	*dc.b	$40=CHDIR /$50=SUBST /$60=JOIN　0で未使用
cd_dpb		equ	70	*dc.l	DPBのアドレス
cd_cur_dir	equ	74	*dc.w	カレントディレクトリのクラスタ番号
cd_rute_pos	equ	76	*dc.w	ルートディレクトリのcd_buff内オフセット

*a:
*	dc.b	'A:',9,'BIN',0,･･････		ドライブ名は必ず大文字
*	dc.b	$40
*	dc.l	dpba
*	dc.w	$ffff
*	dc.w	2
*b:
*	dc.b	'B:',9,'TEMP',9,'BIN',0,･･････
*	dc.b	$40
*	dc.l	dpbb
*	dc.w	$ffff
*	dc.w	2
*c:
*	dc.b	'C:',9,0,･･････
*	dc.b	$40
*	dc.l	dpbc
*	dc.w	$ffff
*	dc.w	2
*d:
*	dc.b	'B:',9,'TEMP',0,･･････
*	dc.b	$60
*	dc.l	dpbd
*	dc.w	$ffff
*	dc.w	7
*e:
*	dc.b	'C:',9,'TEST',0,･･････
*	dc.b	$50
*	dc.l	dpbc
*	dc.w	$ffff
*	dc.w	7
*
*----------------------------------------------------------------------------
*ｃｏｎｆｉｇ．ｓｙｓの追加項目
*
*files     = 16			/5-93
*buffers   = 20 1024		/2-99 / 1024-32768
*lastdrive = z			/a-z
*title     = \title.vs		/タイトルファイルのパス名
*key       = \key.sys		/キーファイルのパス名
*uskcg     = \uskcg.sys		/ユーザー定義文字ファイルのパス名
*bell      = a:\sys\beep.sys	/ｂｅｌｌ用ａｄｐｃｍデータファイル名
*device    = a:\ramdisk.sys #g	/デバイスドライバー名　パラメーター
*device	   = [rom$??????]	/１６進数でｒｏｍブートアドレスを指定する
*				/[rom0]~[rom9]も可能［デバイス形式のＲＯＭ］
*share     = 16 20		/ファイル数/ロックする領域数
*common    = 64k		/commonファンクション用バッファのバイト数
*break on			/off /kill
*verify on			/off
*process   = max level cnt	/平行実行可能なスレッド数を指定
*envset    = 1024 a:\env.dat	/環境エリアのバイト数　環境ファイルパス名
*program   = subst z: a:\bin /起動プログラムパス名　パラメーター
*shell     = \command.x /p	/最終プログラムパス名　パラメーター
*
*----------------------------------------------------------------------------
env.datの構造
名前とその値をつなぐ［＝］の前後はスペースやＴＡＢを入れてはならない。
１つの指定の終わりは必ず改行［＄０ｄ，＄０ａ］であること。
ファイルの終わりは必ずＥＯＦ［＄１ａ］であること。
［例］
path=a:\;a:\bin
temp=e:\
[eof]
*----------------------------------------------------------------------------
*shareの管理方法
*sharestart/sharefile.w/sharecnt.w
*のワークにより管理する先頭１バイトが使用フラグ兼用
*
*sharefile*(92+(12*shearcnt))バイト必要
*
*	ds.b	1		何個のｆｃｂが使用しているかワーク（０で未使用）
*	ds.b	1		シェアリングモード
*	dc.w	pos_len		seek lockの個数
*	ds.b	88		namebf.hの内容
*	dc.l	seekpos		seek lock先頭位置
*	dc.l	locklen		seek lock length
*	dc.l	id		seek lockしたｆｃｂのポインター
*	dc.l	seekpos		seek lock先頭位置
*	dc.l	locklen		seek lock length
*	dc.l	id		seek lockしたｆｃｂのポインター
*	dc.l
*	dc.l
*	dc.l
*	ds.b	1		何個のｆｃｂが使用しているかワーク（０で未使用）
*	ds.b	1		シェアリングモード
*	dc.w	pos_len		seek lockの個数
*	ds.b	88		namebf.hの内容
*	dc.l	seekpos		seek lock先頭位置
*	dc.l	locklen		seek lock length
*	dc.l	id		seek lockしたｆｃｂのポインター
*	dc.l	seekpos		seek lock先頭位置
*	dc.l	locklen		seek lock length
*	dc.l	id		seek lockしたｆｃｂのポインター
*	dc.l
*	dc.l
*	dc.l
*
*
********************************
*rename		lock_file
*delete		lock_file
*chmod		lock_file / none
********************************
*create		lock_open
*newfile	lock_open
*maketmp	lock_open
*open		lock_open
********************************
*read		lock_seek
*write		lock_seek
********************************
*close		lock_close
********************************
*bit 6-4 シェアリングモード
*cmp	$0?	000.コンパチブル
*drw	$1?	001.リード／ライト不可
*dw	$2?	010.ライト不可
*dr	$3?	011.リード不可
*dn	$4?	100.不可なし
*bit 1-0 アクセスモード
*r	$?0	00.読み込み
*w	$?1	01.書き込み
*rw	$?2	10.読み書き

*c	$03	11.読み書き（ｃｒｅａｔｅ時の内部データ）

------------------------------------------------------
  ２回目|  cmp   |  drw   |  dw    |  dr    |  dn    |
        |        |        |        |        |        |
        |r w r c |r w r c |r w r c |r w r c |r w r c |
１回目  |    w   |    w   |    w   |    w   |    w   |
------------------------------------------------------
cmp r	|Y N N N |N N N N |N N N N |N N N N |N N N N |
    w	|N N N N |N N N N |N N N N |N N N N |N N N N |
    rw	|N N N N |N N N N |N N N N |N N N N |N N N N |
    c	|N N N N |N N N N |N N N N |N N N N |N N N N |
------------------------------------------------------
drw r	|N N N N |N N N N |N N N N |N N N N |N N N N |
    w	|N N N N |N N N N |N N N N |N N N N |N N N N |
    rw	|N N N N |N N N N |N N N N |N N N N |N N N N |
    c	|N N N N |N N N N |N N N N |N N N N |N N N N |
------------------------------------------------------
dw  r	|N N N N |N N N N |Y N N N |N N N N |Y N N N |
    w	|N N N N |N N N N |N N N N |Y N N N |Y N N N |
    rw	|N N N N |N N N N |N N N N |N N N N |Y N N N |
    c	|N N N N |N N N N |N N N N |Y N N N |Y N N N |
------------------------------------------------------
dr  r	|N N N N |N N N N |N Y N N |N N N N |N Y N Y |
    w	|N N N N |N N N N |N N N N |N Y N Y |N Y N Y |
    rw	|N N N N |N N N N |N N N N |N N N N |N Y N Y |
    c	|N N N N |N N N N |N N N N |N Y N Y |N Y N Y |
------------------------------------------------------
dn  r	|N N N N |N N N N |Y Y Y Y |N N N N |Y Y Y Y |
    w	|N N N N |N N N N |N N N N |Y Y Y Y |Y Y Y Y |
    rw	|N N N N |N N N N |N N N N |N N N N |Y Y Y Y |
    c	|N N N N |N N N N |N N N N |Y Y Y Y |Y Y Y Y |
------------------------------------------------------

*----------------------------------------------------------------------------
*commonの管理方法
*com_start/com_pos/com_endのワークにより管理するメモリーを直接転送する
*
*	dc.l	このブロックのバイト数（この４バイトは含まない）
*	dc.b	'管理name12文字'
*	dc.l	ユーザーデータのバイト数
*	dc.l	ロックＰＯＳ
*	dc.l	ロックＬＥＮ
*	dc.l	ロックＩＤ
*	ds.b	??	ユーザーデータ
*
*	dc.l	このブロックのバイト数（この４バイトは含まない）
*	dc.b	'管理name12文字'
*	dc.l	ユーザーデータのバイト数
*	dc.l	ロックＰＯＳ
*	dc.l	ロックＬＥＮ
*	dc.l	ロックＩＤ
*	ds.b	??	ユーザーデータ
*----------------------------------------------------------------------------
*環境エリアの構造
*
*	dc.l	環境エリアの長さ（この４バイトも含むバイト数）
*	dc.b	'path=a:\',0	(0で１つの文字列の終わり）
*	dc.b	データ文字列＋０
*	･･････
*	dc.b	0	全ての文字列の終わり
*	ds.b	??	残りは何が入っているかわからない
*----------------------------------------------------------------------------
*追加ＯＳＣＡＬＬの仕様
*
*$ff0f	drvctrl(md*256+drive.w [,?,?])
*	特殊ブロックデバイスに対してｍｄ＞＝１６のときは任意のパラメータを追加できます
*	５＜ｍｄ＜９は指定しないで下さい。１１から１５まではリサーブです。

*	ｍｄ＝９でそのドライブを使用しているハンドラはｃｌｏｓｅされバッファは
*	書き込み・捨てられ・パスはルートになり、サーチＦＡＴも先頭からになります。
*	ｖｅｒ２．００用の FORMAT.X で使用されています。

*	ｍｄ＝１０でそのドライブの、サーチＦＡＴが先頭からになります。
*	ｖｅｒ２．００用の SYS.X で使用されています。
*
*$ff14
*	ネットワークの一部をサポートするＣＡＬＬ
*	デバイスドライバーでサポートされる（ＯＳ起動時−１ＲＥＴＵＲＮ）
*$ff15
*	ネットワークの一部をサポートするＣＡＬＬ
*	デバイスドライバーでサポートされる（ＯＳ起動時−１ＲＥＴＵＲＮ）
*$ff16	session(SCB)
*	ネットワークのセッション層をサポートするＣＡＬＬ
*	デバイスドライバーでサポートされる（ＯＳ起動時−１ＲＥＴＵＲＮ）
*
*$ff17	fatchk(file , buffer)
*	fatchk(file , buffer+0x80000000,buf_len.w)
*	bufferが負の数なら、次にバッファのバイト数がワードで指定されている
*	ものとして次の書式でセクター情報をセットする。
*
*	dc.w	drive no
*
*	dc.l	先頭セクター
*	dc.l	セクター数
*
*	dc.l	次のセクター
*	dc.l	セクター数
*
*	dc.l
*	dc.l
*
*	dc.l	終わりを表わす０
*
*$ff33	breakck(FLG)
*	FLG=0 / 1 / -1　に　2=全てのファンクションでチェックしないを追加
*
*$ff34	drvxchg(old.w,new.w)
*	old/newともに−１の時全てのドライブ変更を元に戻す機能追加
*	リターン値としてカレントドライブの新しいドライブ番号が返る(a:=0)

*$ff3d	open(file,md.w)
*	md bit 6-4	シェアリングモード
*			000.コンパチブル
*			001.リード／ライト不可
*			010.ライト不可
*			011.リード不可
*			100.不可なし
*
*$ff44	ioctrl(md.w,???)
*	これまでのＭＤ＝０〜７に次のファンクションが追加されます
*	(9,drive.w)　指定ドライブがローカルかリモートかを返します
*	(10,fileno.w)指定ハンドラがローカルかリモートかを返します
*	ローカルの場合はデバイスドライバーのdevtypが返る
*	リモートの場合はBIT 12がＯＮになる
*	(11,count.w,time.w)リトライのカウンターセット（デフォルト３回）
*	ただし現ＯＳではこの変更により何も変わらない
*	デバイスドライバーでサポートする予定
*	(12,fileno.w,f_code.w,buffer.l)ハンドラによる特殊コントロール
*	(13,drive.w,f_code.w,buffer.l)ドライブによる特殊コントロール
*
*$ff4b	exec(md.w , file.l , comline.l , env.l)

*	md.wの上位８ビットにモジュール番号を指定可能にして、オーバーレイＸ
*	ファイルのロードが可能になりました。

*	また新たなファンクションとして、ファイル名からモジュール番号を求める
*	md=5を追加、そのファンクションコール方法は次の通り。
*		md=exec(5,file1,file2,0)
*	［file1］は実ファイル名、［file2］はモジュールのファイル名で、
*	リターン値の［md］はｂｉｔ８−１５にモジュール番号、それ以外は
*	０が返ります、エラーの場合負の数が返ります。

*	モジュール番号指定のロードに対応して、ＰＳＰ内にそのモジュール番号
*	をセットするようになりました。（プログラム管理方法　参照）

*	Ｘファイルの先頭から４バイト目のオプションビットによりメモリー確保方法
*	が変更できるようになった。　
*	bit 0 がついていると、必要最小ブロックを割り当てる
*	bit 1 がついていると、メモリーの上位から探し、割り当てる
*	両方ともついていない時、最大メモリー領域を割り当てる

*$ff55	common(md.w,name.l,pos.l,buffer.l,len.l)
*	len=common(0,name)
*		nameが存在するかチェック
*		return=存在した場合はバイト数、存在しない場合はエラーコード
*	len=common(1,name,pos,buffer,len)
*		nameのposからbufferへlenバイト数を読み込む
*		return=読み込んだバイト数、エラーコード
*	len=common(2,name,pos,buffer,len)
*		nameのposへbufferからlenバイト数を書き込む
*		nameが存在しない場合は新しく作る
*		len=0で切り詰める
*		return=書き込んだバイト数、エラーコード
*	err=common(3,name,pos,id_psp,len)
*		nameのposからlenバイト数をidを付けてロックする
*		return=エラーコード
*	err=common(4,name,pos,id_psp,len)
*		nameのposからlenバイト数をidを付けてロック解除する
*		return=エラーコード
*	err=common(5,name)
*		nameを消去する
*		return=エラーコード
*
*$ff58	malloc2(md.w,length)
*	ｍａｌｌｏｃファンクションのモード指定可能バージョン
*	md=0	下位から探し、割り当てる
*	md=1	必要最小ブロックを割り当てる
*	md=2	上位から探し、割り当てる
*
*$ff5a	maketmp(nameptr,atr.w)
*	指定パスにテンポラリーファイルを作成し、そのハンドラと、
*	ファイル名（nameptrが書き変わる）を返します
*	nameptrには指定パス名の次にfile????.txtの様にどのような
*	テンポラリーファイルを作るか指定します。?の位置に数字が
*	あてはめられ、0000~9999まで変化します。
*	?のかわりに数字をかいた場合、その番号から検索します。
*
*$ff5b	newfile(nameptr,atr.w)
*	$ff3c createとほとんど同じで、ファイルが存在した場合、
*	エラー(-80)を返すところだけ違います。
*
*$ff5c	lock(md.w,??)
*	lock(0,fileno.w,offset,len)	ファイルアクセスのロック
*	lock(1,fileno.w,offset,len)	ファイルアクセスのロック解除
*
*$ff5e	netinf(md,??)
*	ネットワークの一部をサポートするＣＡＬＬ
*	デバイスドライバーでサポートされる（ＯＳ起動時−１ＲＥＴＵＲＮ）
*
*$ff5f	assign(md,??)
*	mode=assign(0,buff1,buff2)	割り当てリストのエントリを得る
*	   assign(1,buff1,buff2,mode)	割り当てリストのエントリの作成
*	   assign(4,buff1)	割り当てリストのエントリのキャンセル
*

*$ff7d	s_malloc(md.w,length)
*	メインのメモリー管理からメモリーを確保してそのポインターを返す
*	md=0	下位から探し、割り当てる
*	md=1	必要最小ブロックを割り当てる
*	md=2	上位から探し、割り当てる
*
*$ff7e	s_mfree(ptr)
*	メインのメモリー管理のポインターを指定してメモリーを解放します
*	s_processで指定しているアドレスで、かつカレントＩＤならばkill_prします
*	kill_prまでする場合、内部のメモリー管理で常駐終了しているもの等は
*	メインのメモリー管理につながれます。
*
*$ff7f	s_process(id.w,start,length,i_len)
*	サブのメモリー管理の先頭アドレスとそのバイト数を指定します
*	これ以後、指定ＩＤのスレッドでのメモリー管理はこの範囲内となります
*	i_lenは新しいメモリー管理の先頭ブロック（必ず確保される）のバイト数
*	startからの１６バイトは先頭のメモリー管理のために壊されます。
*	id=0（メインスレッド）は変更できません
*	リターン値	i_lenバイト確保したポインター
*			$ffff00??	ＩＤエラー
*			-14		length < i_len+16
*
*$fff3	diskred(adr.l , drv.w , sect.w , len.w )
*	diskred(adr.l+0x80000000 , drv.w , sect.l , len.l )
*	ａｄｒ．ｌが負の数ならｓｅｃｔ／ｌｅｎがｌｏｎｇ指定になる
*	大容量ドライブ・特殊ドライブ対応
*
*$fff4	diskwrt(adr.l , drv.w , sect.w , len.w )
*	diskwrt(adr.l+0x80000000 , drv.w , sect.l , len.l )
*	ａｄｒ．ｌが負の数ならｓｅｃｔ／ｌｅｎがｌｏｎｇ指定になる
*	大容量ドライブ・特殊ドライブ対応
*
*$fff5	indosflg()
*	ＯＳワーク内のポインターを返します。スーパーバイザー領域なので
*	ユーザーモードではアクセスできませんので注意して下さい。
*	このポインターから後ろにはＩＮＤＯＳ＿ＦＬＧ以外にも重要なワークが
*	ありますので、読むのはかまいませんが、絶対かき直さないで下さい。
*	ver1.99以上からサポート
*	このコールはＩＮＴＶＣＳで書き換えできません。
indosf:		ds.w	1	* OS INDOS FLG
doscmd:		ds.b	1	* OS ff?? flg
fat_flg:	ds.b	1	* new fat search flg(0=current/nz=2)
retry_count:	ds.w	1	*count(3)
retry_time:	ds.w	1	*time= n/100second(100)
verifyf:	ds.w	1	* verify flg(off=0)
breakf:		ds.b	1	* break on=1/off=0
ctrlpf:		ds.b	1	* ctrlp mode
cng_flg:	ds.b	1	*dos exit 時の change check flg
wkcurdrv:	ds.b	1	* curdrv work(a=0)
brkflg:		ds.b	1	* BREAK ACTIVE FLG=$80+MODE KEY(bit0-6)
rstflg:		ds.b	1	* RESET ACTIVE FLG=$01
rstmod:		ds.l	1	* RESET D0 BUFFER
dvedwk:		ds.l	1	* ＯＳで登録したデバイスドライバーのＥＮＤ

*$fff6	super_jsr(adr)
*	スーパーバイザー領域のプログラムをＪＳＲしたい時に使用します
*	d0-d7/a0-a6は指定プログラムに渡され、プログラムからのリターン状態
*	のd0-d7/a0-a6が返ります。srは変化しません。
*	usp/sspはどのように渡されるか不定なので、呼ばれたプログラムでは
*	スタックからパラメーターを受け取ることはできません。
*	ＪＳＲした結果、暴走したり、バスエラーが出ても処理してません
*	このコールはＩＮＴＶＣＳで書き換えできません。
*
*$fff7	bus_err(s_adr,d_adr,mode.w)
*	スーパーバイザー領域やバスエラーが出るかもしれない領域が読み書き
*	できるかチェックして、その結果を返します。
*	このコールはＩＮＴＶＣＳで書き換えできません。
*
*	s_adr	読むデータのポインター
*	d_adr	書き込むポインター
*	mode.w	1	バイトで読み書き
*		2	ワードで読み書き
*		4	ロングで読み書き
*	結果	d0.l	2		s_adrでバスエラー
*			1		d_adrでバスエラー
*			0		読み書き可能
*			-1		パラメーターエラー
*					（mode.wのエラー、奇数アドレス）
*
*$fff8-$ffff	バックグランドタスク用ファンクションコール
*		詳しくは（バックグランドタスクについて）参照
*		これらのコールはＩＮＴＶＣＳで書き換えできません。
*----------------------------------------------------------------------------
*プログラム管理方法
*ｅｘｅｃファンクションコールで起動されたプログラムはメモリ管理
*ポインタ（１６バイト）の後に、次の２４０バイトがあり、プロセス
*の管理のためのワークエリアとして使用される。
***メモリ管理ポインタ（１６バイト）
*000 dc.l	?	１つ前のメモリ管理ポインタ
*004 dc.l	?	このメモリを確保したプロセスのメモリ管理ポインタ
*008 dc.l	?	このメモリブロックの終わり＋１のアドレス
*00c dc.l	?	次のメモリ管理ポインタ（０なら終わり）
***プロセス管理ポインタ（２４０バイト）
*010 dc.l	?	自分に与えられた環境のアドレス
*014 dc.l	?	自分の終了アドレス
*018 dc.l	?	自分の＾Ｃアドレス
*01c dc.l	?	自分のエラー中止アドレス
*020 dc.l	?	自分に与えられたコマンドラインのアドレス
*024 dc.l	?,?,?	自分のファイルハンドラの使用状況（ver1.00と違う）
*030 dc.l	?	自分のｂｓｓの先頭アドレス
*034 dc.l	?	自分のｈｅｅｐの先頭アドレス（ｂｓｓと同じ）
*038 dc.l	?	自分の初期ｓｔａｃｋアドレス（ｈｅｅｐの終わり）
*03c dc.l	?	子プロセス実行時の自分のＵＳＰレジスタの値
*040 dc.l	?	子プロセス実行時の自分のＳＳＰレジスタの値
*044 dc.w	?	子プロセス実行時の自分のＳＲレジスタの値
*046 dc.w	?	アボート（中止）のときのＳＲレジスタの値
*048 dc.l	?	アボート（中止）のときのＳＳＰレジスタの値
*04c dc.l	?	trap10（CTRL+OPT.1+DELキーによるリセット処理）
*050 dc.l	?	trap11（STOPキーによるＨＤＯＦＦ処理、その他）
*054 dc.l	?	trap12（COPYキーによるＨＣＯＰＹ処理、その他）
*058 dc.l	?	trap13（CTRL+Cキーによるﾌﾞﾚｰｸﾁｪｯｸﾌﾗｸﾞのセット）
*05c dc.l	?	trap14（エラー表示と、中止・再実行・無視の選択処理）
*060 dc.l	0	ＯＳから起動したフラグ（−１＝ＯＳ　／０＝ｕｓｅｒ）
*064 dc.b	0	モジュール番号（ver2.00で新規追加）
*065 dc.b	0,0,0	リザーブ
*068 dc.l	0	子プロセスのＰＳＰアドレス（なければ０）（ver2.00で新規追加）
*06c			リザーブ
*080 dc.b	'a:'
*082 dc.b	'\bin\',0
*0c4 dc.b	'command.x',0
*0dc 			リザーブ
*100			プログラム先頭
*----------------------------------------------------------------------------
*新デバイスドライバーの構造
*
*１つのファイル内に複数のデバイスドライバーを作る場合、devnxtをつないで
*最後に−１を指定すれば良いが、注意すべきことが２つあります。
*まず、dv_initあるいはdv_init2は１ファイル１回、先頭のドライバーに対して
*呼ばれます。先頭のドライバーの初期化で全ての初期化をして下さい。
*またdevendは全てのドライバーの終わりを指定して下さい。
*さらに初期化コールでＢＰＢのポインターをもらう関係上、ブロックデバイスは
*１ファイル１個だけ、それも先頭にあることが望ましく、それ以外は誤動作する
*場合があります。
*
**デバイスドライバーの先頭２２バイトの内容
devnxt	equ	0	*dc.l	次のドライバーへのポインター(-1でｅｎｄ)
devtyp	equ	4	*dc.w	ドライバーのタイプ
devstr	equ	6	*dc.l	ドライバーにパラメータ設定
devent	equ	10	*dc.l	ドライバーに実行を指示
devnam	equ	14	*ds.b 8	ドライバー名

**devtypの詳細
**bit	15	=0 ブロックデバイス	=1 キャラクタデバイス
**	14	=0 ioctrlサポートなし	=1 ioctrlサポートあり
**	13	=1 特殊ブロックデバイスドライバー（新規）
**	12	特殊ブロックデバイスドライバーの時のみ意味を持つ
**		=1 ネットワークドライバー =0その他の特殊ドライバー
**	11~7	=0 予約
**	 6	=0			=1 特殊ｉｏｃｔｒｌサポート
**	 5	=0 cookedモード		=1 rawモード
**	 4	=0			=1 特殊デバイス
**	 3	=0			=1 カレントCLOCKデバイス
**	 2	=0			=1 カレントNULデバイス
**	 1	=0			=1 カレント標準出力デバイス
**	 0	=0			=1 カレント標準入力デバイス


*---------------------------------------------
**comcodの内容（特殊ブロックデバイスドライバーでない場合）
dv_init		equ	0
dv_medai	equ	1
dv_build	equ	2
dv_ctlinp	equ	3
dv_input	equ	4
dv_inkey0	equ	5	*device
dv_ctrl		equ	5	*drive
dv_inpsns	equ	6
dv_inflsh	equ	7
dv_output	equ	8
dv_outchk	equ	9
dv_outsns	equ	10
dv_otflsh	equ	11
dv_ctlout	equ	12
dv_sp_ctrl	equ	19


**各パラメータの内容

*----------------
**各コマンド共通(6,7,10,11はこれのみ)
reqlen	equ	0	*dc.b	パラメータの総バイト数
unitcd	equ	1	*dc.b	ドライブ内ｕｎｉｔ番号
comcod	equ	2	*dc.b	コマンド
errlow	equ	3	*dc.b	エラーコード（下位）
erhigh	equ	4	*dc.b	エラーコード（上位）
***8byte

*----------------
**initコマンド(0)
mxunit	equ	13	*dc.b	ドライバー内使用可能ｕｎｉｔ数を返すワーク
devend	equ	14	*dc.l	ドライバー使用メモリーの終わりを返すワーク
bpbpoi	equ	18	*dc.l	bpbのポインター配列のアドレスを返すワーク
			*config.sysのdevice=の後のポインタを知らせるワーク
			*dc.b	'ramdisk.sys',0,'/gm720',0,0	の先頭
bdevno	equ	22	*dc.b	ドライバーにドライブ番号を知らせるワーク
			*	デバイス中のカレントドライブを返す
*----------------
**media checkコマンド(1)
diskid	equ	13	*dc.b	メディアバイト
diskfg	equ	14	*dc.b	（-1=変更,0=不明,1=変更無）をセットするワーク

*----------------
**build bpbコマンド(2)
*diskid	equ	13	*dc.b	メディアバイト
dmaadr	equ	14	*dc.l	???
*bpbpoi	equ	18	*dc.l	bpbのポインターアドレスを返すワーク

*----------------
**read/writeコマンド(3,4,8,9,12)
*diskid	equ	13	*dc.b	メディアバイト
*dmaadr	equ	14	*dc.l	データアドレス先頭
dmalen	equ	18	*dc.l	データのバイト数（ブロックデバイスはセクタ数）
sta_rec	equ	22	*dc.l	先頭セクタ数

*----------------
**getコマンド(5)
getdat	equ	13	*dc.b	ドライブ（ドライブコントロールコマンド）
			*	デバイス（先読みしたキーコード用ワーク）
*----------------
**spc_ctrlコマンド(19)
*dmaadr	equ	14	*dc.l	データアドレス先頭
f_code	equ	18	*dc.w	ファンクション番号上位・下位

*---------------------------------------------
**comcodの内容（特殊ブロックデバイスドライバーの場合）
*各コマンド共　ｖｅｒｉｆｙ　ｏｎの時は＋１２８の値をとる
*ｖｅｒｉｆｙ　ｏｆｆの時のコマンドは次の２１個
dv_init2	equ	64
dv_chdir	equ	65
dv_mkdir	equ	66
dv_rmdir	equ	67
dv_rename	equ	68
dv_delete	equ	69
dv_chmod	equ	70
dv_files	equ	71
dv_nfiles	equ	72
dv_create	equ	73
dv_open		equ	74
dv_close	equ	75
dv_read		equ	76
dv_write	equ	77
dv_seek		equ	78
dv_filedate	equ	79
dv_dskfree	equ	80
dv_drvctrl	equ	81
dv_drvdpb	equ	82
dv_drvread	equ	83
dv_drvwrite	equ	84
dv_sp_ctrl2	equ	85
dv_fflush	equ	86
dv_medchk	equ	87
dv_lock		equ	88

**各パラメータの内容
oserror	equ	18	*dc.l	ｏｓのエラーコード用ワーク
			*及びｏｓのリターン値用ワーク
			*errlowを０にしてリトライしないでｏｓエラーとする
			*init2以外の全てのコールで有効
*----------------
**init2コマンド(64)
*mxunit	equ	13	*dc.b	ドライバー内使用可能ｕｎｉｔ数を返すワーク
*devend	equ	14	*dc.l	ドライバー使用メモリーの終わりを返すワーク
*bpbpoi	equ	18	*dc.l	*config.sysのdevice=の後のポインタを知らせるワーク
				*dc.b	'ramdisk.sys',0,'/gm720',0,0	の先頭
*bdevno	equ	22	*dc.b	ドライバーにドライブ番号を知らせるワーク

*----------------
**chdirコマンド(65)
pathad	equ	14	*dc.l	パス名先頭アドレス
**
**	cd \bin\test	の場合
**pathad:	dc.b	0
**	+1	dc.b	drive no		ドライブ番号(0=a)
**	+2	dc.b	9,'bin',9,'test',9,0	パス名＋ファイル名＋拡張子
**		（88バイト）
**
*----------------
**mkdirコマンド(66)
*pathad	equ	14	*dc.l	パス名先頭アドレス
**
**	md \bin\test	の場合
**pathad:	dc.b	0
**	+1	dc.b	drive no		ドライブ番号(0=a)
**	+2	dc.b	9,'bin',9,0		パス名
**	+67	dc.b	'test    '		ファイル名
**	+75	dc.b	'   '			拡張子
**	+78	dc.b	0,0,0,0,0,0,0,0,0,0	ファイル名の残り１０バイト
**		（88バイト）
**	(67-85)のpathad/pathold/pathnewもこれと同じ形式
*----------------
**rmdirコマンド(67)
*pathad	equ	14	*dc.l	パス名先頭アドレス
**
**
*----------------
**renameコマンド(68)
pathold	equ	14	*dc.l	変更前パス名先頭アドレス
pathnew	equ	18	*dc.l	変更後パス名先頭アドレス

*----------------
**deleteコマンド(69)
*pathad	equ	14	*dc.l	パス名先頭アドレス

*----------------
**chmodコマンド(70)
chatr	equ	13	*dc.b	ＡＴＲ（−１で読み出しのみ）
*pathad	equ	14	*dc.l	パス名先頭アドレス
*oserror equ	18	*dc.l	ｏｓのエラーコード用ワーク
				*及びＡＴＲのリターン値用ワーク

*----------------
**filesコマンド(71)
*chatr	equ	13	*dc.b	ＡＴＲ
*pathad	equ	14	*dc.l	パス名先頭アドレス
filbuf	equ	18	*dc.l	files,nfiles用バッファ
				*dc.b	search atr---------+
				*dc.b	drive no (使用不可)|ドライバー
				*ds.b	8(work)------------+任意使用可
				*ds.b	8(search filename)-+(20バイト)
				*ds.b	3(search ext)------+一応設定ずみ
				*dc.b	atr
				*dc.w	time
				*dc.w	date
				*dc.l	file_len
				*ds.b	23("file.ext",0)
*----------------
**nfilesコマンド(72)
*filbuf	equ	18	*dc.l	files,nfiles用バッファ

*----------------
**createコマンド(73)
*chatr	equ	13	*dc.b	ＡＴＲ
*pathad	equ	14	*dc.l	パス名先頭アドレス
newfile	equ	18	*dc.l	0=create / 1=newfile　のフラグ
fcbadr	equ	22	*dc.l	ＦＣＢへのポインター
				*dc.b	handoru use count
				*dc.b	flag
				*dc.l	devadr
				*dc.l	seek data pos現在のシーク位置
				*dc.l	share_posシェア管理領域のアドレス
				*dc.b	open_mode
				*dc.b	(ディレクトリセクター内何番目)
				*dc.b	(データＦＡＴ内セクターオフセット)
				*dc.b	(ＦＡＴ先頭からのセクターオフセット)
				*dc.w	(data のＦＡＴ番号)
				*dc.l	(現在のデータのセクター位置)
				*dc.l	(現在のデータのｉｏｂｕｆアドレス)
				*dc.l	(ディレクトリのセクター位置)
				*dc.l	(next data pos)
				*ds.b	8(name1)一応設定されている
				*ds.b	3(ext)一応設定されている
				*dc.b	(atr)一応設定されている
				*ds.b	10(name2)一応設定されている
				*dc.w	(time)一応設定されている
				*dc.w	(date)一応設定されている
				*dc.w	(start fat)
				*dc.l	(file len)
				*dc.w	(ディスク内ｆａｔ番号1)
				*dc.w	(ファイル内ｆａｔ番号1)
				*dc.w	(ディスク内ｆａｔ番号2)
				*dc.w	(ファイル内ｆａｔ番号2)
				*dc.w	(ディスク内ｆａｔ番号3)
				*dc.w	(ファイル内ｆａｔ番号3)
				*dc.w	(ディスク内ｆａｔ番号4)
				*dc.w	(ファイル内ｆａｔ番号4)
				*dc.w	(ディスク内ｆａｔ番号5)
				*dc.w	(ファイル内ｆａｔ番号5)
				*dc.w	(ディスク内ｆａｔ番号6)
				*dc.w	(ファイル内ｆａｔ番号6)
				*dc.w	(ディスク内ｆａｔ番号7)
				*dc.w	(ファイル内ｆａｔ番号7)
				*()表示はドライバー任意使用可(81バイト)
*----------------
**open	コマンド(74)
*pathad	equ	14	*dc.l	パス名先頭アドレス
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター
				*モードはfcbのopen modeを参照(0,1,2)
*----------------
**closeコマンド(75)
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター

*----------------
**read	コマンド(76)
*dmaadr	equ	14	*dc.l	バッファ先頭アドレス
*dmalen	equ	18	*dc.l	データのバイト数（読み込んだバイト数を返す）
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター

*----------------
**writeコマンド(77)
*dmaadr	equ	14	*dc.l	バッファ先頭アドレス
*dmalen	equ	18	*dc.l	データのバイト数（書き込んだバイト数を返す）
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター

*----------------
**seekコマンド(78)
seekmd	equ	13	*dc.b	モード（０，１，２）
seekps	equ	18	*dc.l	シーク値（現在のシークｐｏｓを返す）
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター

*----------------
**filedateコマンド(79)
fildate	equ	18	*dc.l	ｄａｔｅ：ｔｉｍｅ（０で読み込みここに返す）
*fcbadr	equ	22	*dc.l	ＦＣＢへのポインター

*----------------
**dskfreeコマンド(80)
*dmaadr	equ	14	*dc.l	バッファ先頭アドレス（４ｗｏｒｄ分）
				*dc.w	使用可能なクラスタ数
				*dc.w	総クラスタ数
				*dc.w	１クラスタあたりのセクタ数
				*dc.w	１セクタあたりのバイト数
*dmalen	equ	18	*dc.l	使用可能なバイト数用ワーク
*----------------
**drvctrlコマンド(81)
*getdat	equ	13	*dc.b	ドライブコントロールコマンド
*dmaadr	equ	14	*dc.l	第２パラメータのｓｐアドレス
			*これはｄｏｓｃａｌｌのｄｒｖｃｔｒｌ（追加仕様）により
			*要求されたもので、そのままユーザーに返される。
			*サポートできない場合oserrorに−１４を返せば良い。
*----------------
**drvdpbコマンド(82)
*dmaadr	equ	14	*dc.l	バッファ先頭アドレス（8ｗｏｒｄ分）
			*これはｄｏｓｃａｌｌのｇｅｔｄｐｂにより
			*要求されたもので、そのままユーザーに返される。
			*サポートできない場合oserrorに−１４を返せば良い。
		*dc.w	１セクタあたりのバイト数(0,128,256,512,1024,2048･･･32768)
		*dc.b	１クラスタあたりのセクタ数―１(0,1,3,7,15,31,63,127)
		*dc.b	クラスタ＜＞セクタのシフトカウント(0,1,2,3,4,5,6,7)
		*dc.w	ＦＡＴの先頭セクタ番号（６５５３５以下）
		*dc.b	ＦＡＴ領域の個数(1,2)
		*dc.b	ＦＡＴのしめるセクタ数（１２８以下コピーの分は別）
		*dc.w	ルートディレクトリの個数（２０４８以下）
		*dc.w	データ部の先頭セクタ番号（６５５３５以下）
		*dc.w	総クラスタ数＋１
		*dc.w	ルートディレクトリの先頭セクタ番号（６５５３５以下）

*----------------
**drvread/drvwriteコマンド(83,84)
*dmaadr		equ	14	*dc.l	データアドレス先頭
*dmalen		equ	18	*dc.l	データのセクタ数
*sta_rec	equ	22	*dc.l	先頭セクタ数
			*これはdoscallのdiskred/diskwrt(追加仕様)により
			*要求されたもので、そのままユーザーに返される。
			*サポートできない場合oserrorに−１４を返せば良い。
*----------------
**spc_ctrlコマンド(85)
*dmaadr	equ	14	*dc.l	データアドレス先頭
*f_code	equ	18	*dc.w	ファンクション番号上位・下位

*----------------
**fflushコマンド(86)
			*ctrl-c／reset／ｏｓのfflushファンクションでコール
			*される（ｒｅａｄバッファを捨てる）
*----------------
**medchkコマンド(87)
			*oserrorに−１を返せばカレントディレクトリは￥
			*（ルート）になる。０ならそのまま使う。
			*ＯＳがドライバーにファイル名を渡す前に必ず呼ばれる
**lockコマンド(88)
			*ネットワークドライブのためにｏｓ内部でロックする
			*とともにデバイスドライバーにも知らせるので、サーバー
			*に送ってサーバー側のファイルにもロックをかけて下さい。
*seekmd	equ	13	*dc.b	lock mode(0=lock 1=unlock)
locklen	equ	14	*dc.l	ロック／ロック解除するファイルバイト数
*seekps	equ	18	*dc.l	ロック／ロック解除するｓｅｅｋ先頭位置
*fcbadr	equ	22	*dc.l	ｆｃｂへのポインター
*----------------------------------------------------------------------------
*＊＊ネットワークドライバーの扱い
*このドライバーはＣＯＮＦＩＧ時、あるドライブ（例えばＤ：）として設定され、
*ファイル名の頭に￥コンピュータ名￥を追加しながらアクセスするものとする。
*当然、ＣＤ　Ｄ：￥コンピュータ名￥ＴＥＭＰとしておけば、Ｄ：ＴＥＳＴで
*ネットワーク上のＴＥＭＰディレクトリーのＴＥＳＴファイルをアクセス可能だし、
*ＳＵＢＳＴ　Ｚ：　Ｄ：￥コンピュータ名￥ＴＥＭＰとしておけば、Ｚ：￥ＴＥＳＴ
*でアクセス可能になる。
*ドライバーとアプリケーション間の細かなインタフェースはｄｒｖｃｔｒｌで行なう
*また、この種のドライバーは原則として、自分の中にセッション層以下を持たず、
*ＳＥＳＳＩＯＮ　ＤＯＳＣＡＬＬ（＄ＦＦ１６）を使用して動くものとする。
*この種のドライバーとして、標準Ｈｕ−ＮＥＴ（ＭＳ−ＮＥＴと同じ）がサポートされ
*ＮＦＳはオプションとして用意される。
*セッション層以下は別のデバイスドライバーあるいは常駐終了プログラムによる。
*----------------------------------------------------------------------------
*----------------------------------------------------------------------------
*----------------------------------------------------------------------------
*----------------------------------------------------------------------------
*バックグランドタスクについて
*----------------------------------------------------------------------------
*config.sysで、平行実行可能なスレッド数を指定
*process = max level cnt
*	MAX 2-32 スレッド数
*	LEVEL 2-255 メインスレッドの実行間隔（小さい方が間隔が短い）
*	CNTは何ｍｓに１回割り込むか１−１００の値
*（無指定１、最小２／最大３２）１ということはスレッドの切り替えをしない
*ということで、管理テーブルも作られないので、バックグランド処理はできない
*スレッド切り替えのための割り込みは、ＭＦＰのＴＩＭＥＲ−Ｄを使用します。
*アプリケーションで TIMER-D 割り込みを使用することはできなくなります。
*----------------------------------------------------------------------------
*新規ｏｓコール
*$fff8	*id=open_process(name ,cnt.w ,usp ,ssp ,sr.w ,pc ,buff ,sleep_time)
*$fff9	*error=kill_process()
*$fffa	*id=get_process(id.w ,buff)
*$fffb	*error=suspend_process(id.w)
*$fffc	*error=sleep_process(time)
*$fffd	*error=send_process(my_id.w ,your_id.w ,command.w ,u_buff ,u_length)
*$fffe	*time=time_process()
*$ffff	*void change_process()
*ｉｎｔｖｃｓ／ｉｎｔｖｃｇではこれらの処理ルーチンを変更できません。
*これらの内次の３つは別の意味で使用されています。現在処理されていませんが
*システムでサポート予定なので使用しないで下さい。
*$fff8=open(id=d0.w)			d0.wのスレッドがオープンされた。
*$fff9=kill(id=d0.w)			d0.wのスレッドが消去された。
*$ffff=change(id=d0.w)			d0.wのスレッドに切り替えた。
*この処理はＯＳから呼ばれるので、スーパーバイザー状態です。
*この処理では全レジスタ保存しなければならず、ＯＳコールはできません。
*rtsでリターンして下さい

*$fff8	id=open_pr(name,counter.w ,usp ,ssp ,sr.w ,pc ,buff,sleep_time)
*	バックグランドタスクとして登録します。ＳＬＥＥＰ状態になります
*	リターン値はスレッドＩＤで０から平行実行可能なスレッド数−１までの値
*	name	スレッドの名前を表わす１５文字以内の文字列で同じ名前が起動中で
*		あればエラーとなります
*	counter	バックグランドタスクの実行間隔の制御をします
*		2~255（何回に１回実行するか？ 0,1は2として扱う）
*	usp	ユーザープログラム用スタック初期値
*	ssp	ＯＳ、ＢＩＯＳ及び割り込み関係用スタック初期値（６Ｋバイト要）
*	sr	ユーザープログラム起動時のＦＬＧレジスタ（０／＄２０００）
*	pc	ユーザープログラムの実行先頭番地（ここからバックグランド
*		タスクとしてスタートする。）
*	buff	タスク間通信のためのバッファ
*	sleep_time 待ち時間ミリ秒指定のロング値（０で永久にＳＬＥＥＰ）
*buff:
*	dc.l	length		*データ用バッファのバイト数
*	dc.l	buffer addres	*データ用バッファアドレス
*	dc.w	command		*コマンド用バッファエリア
*	dc.w	id		*−１で通信許可（相手のＩＤ用エリア）
*	その他のレジスタは全て０でスタートする
*	このようにしてバックグランドタスクとして登録されたスレッドは、keeppr
*	ＯＳコールにより終了し、kill_pr ｏｓコールによりスレッドテーブルから
*	削除されメモリーも解放される。
*	すなわちkeepprしてしまったプロセスは、終了したい場合、オープンしたファ
*	イルは自分でクローズして、自分自身をkill_prすることにより、プロセス
*	全体を終了させ、メモリーも解放されることになります。
*	プロセス内でいくつかのスレッドをオープンして動作した後で、exitやexit2
*	で終了してしまう場合は、プロセス内でオープンしたスレッドのみをkill_pr
*	して終了して下さい。メインのスレッドをkill_prした場合、その後の動作は
*	保証されません。
*	name_exist	=-27
*	process_over	=-29
*
*$fff9	*error=kill_pr()
*	自分自身を削除します、常駐終了したプロセスの場合同じＰＳＰ＿ＩＤを持つ
*	スレッドは全て削除され、確保していたメモリーも解放されます。
*	自分でオープンしたファイルは全てクローズして書き換えたベクター等も元に
*	戻した後で実行して下さい。システムではスレッドの削除と、メモリーの解放
*	以外は行ないません。
*	自分以外を削除したい場合は、send_pr()によりｋｉｌｌコマンドを送って下さい
*	例：send_pr(自分のＩＤ.w、削除したいＩＤ.w、$fff9.w,0,0)
*
*
*$fffa	*id=get_pr(id.w ,buff)
*	指定ＩＤのスレッド管理情報をｂｕｆｆにコピーします
*	ＩＤとして−１を指定してbuff+96からスレッドの名前を指定してコールすると
*	リターン値としてＩＤ番号がわかり、buffには管理情報がコピーされます。
*	ＩＤとして−２を指定すると、自分の管理情報とＩＤが返ります。
*	id_error	=$ffff00??	??=max id
*	name_not_found	=-1
*	ok		=$000000??	??=id
*	ｂｕｆｆは１１６バイト必要で、その内容は次の通りです。
*	dc.l next_ptr	(終わりは先頭につながる)
*	dc.b wait_flg	nomal=0 / wait=$ff
*	dc.b counter 割り込みのたびに減算される(0で次のスレッドへ）
*	dc.b max counter 用ワーク
*	dc.b doscmd+1 用ワーク
*	dc.l psp_id	プロセスＩＤ(0で未使用のスレッド）
*	dc.l	usp
*	dc.l	d0,d1,d2,d3,d4,d5,d6,d7
*	dc.l	a0,a1,a2,a3,a4,a5,a6
*	dc.w	flg(sr)
*	dc.l	pc
*	dc.l	ssp
*	dc.w	indosf
*	dc.l	indosp
*	dc.l	buff
*	ds.b	16('name',0)	*offset 96
*	dc.l	0	ｗａｉｔ時間残り（ミリ秒）

*管理領域内の次の８バイトは転送されない
*	dc.l	memory 管理start
*	dc.l	memory 管理end
*
*$fffb	*error=suspend_pr(id.w)
*	指定のスレッドＩＤを強制的にＳＬＥＥＰ状態にします。
*	send_prで起こすまでＳＬＥＥＰします。
*	self error	=-1
*	id error	=$ffff00?? ??=max id
*	ok		=0
*
*$fffc	*timer=sleep_pr(time)
*	ＳＬＥＥＰ状態に入ります。
*	count＝待ち時間ミリ秒指定のロング値（０で永久にＳＬＥＥＰ）
*	send_prにより起こされた場合は残り時間がミリ秒で返ります。０の場合
*	は永久ＳＬＥＥＰ状態から起こされたことになります。

*	＊リターン値が−１の場合
*	待ち時間が経過して自分で起きた場合は−１が返り、バッファの内容は
*	変化しません。

*	＊リターン値が−２の場合
*	待ち時間が経過したがsuspend_prで止められていたためsend_prで起こされ
*	た場合は−２が返り、バッファの内容はsend_prにより変化します。

*	＊リターン値が−１や−２でない場合
*	残り時間がミリ秒で返ります。バッファの内容はsend_prにより変化します。

*	send_prのコマンドが$fffbの場合、バッファは変化しません
*	それ以外の場合はバッファに次のように設定されます。
*buff:	dc.l	length		*データ用バッファに書き込まれたバイト数
*	dc.l	buffer addres	*データ用バッファアドレス（変化しない）
*	dc.w	command		*コマンド番号
*	dc.w	id		*起こしてくれたスレッドのＩＤ

*	バッファの内容を処理してからバッファのアドレスと長さを設定して、ＩＤ
*	のところを−１にセットして下さい。ＩＤを−１にすることにより、他の
*	スレッドからの通信を許可することになります。
*	sleep_prしている時でなくても、send_prによりデータが送られる場合が
*	あります、その場合sleep_prするとすぐに起こされ、設定した待ち時間が
*	リターン値として返ります。
*
*$fffd	*error=send_pr(my_id.w ,your_id.w ,command.w ,u_buff ,u_length)
*	ユーザー割り込みルーチン内からでもｃａｌｌできます
*	my_idは自分のＩＤです。your_idは起こしたいスレッドのＩＤです。
*	commandは通信の内容を表わす１６ビットの値でシステムで決められている
*	以外はそれぞれのスレッド間で決められているものとします。

*	システム予約コマンドは$FF??であり現在存在するのは次の通りで、全て
*	データ通信用バッファは使用しません。u_lengthは０を指定して下さい。
*	$fff9	スレッドを消去するよう要求する
*	$fffb	強制ＳＬＥＥＰ状態から起こすだけ（バッファは全て変化しない）
*	$fffc	ＳＬＥＥＰに入るよう要求する（起こされた時このコマンドなら
*		すぐにＩＤを−１にしてＳＬＥＥＰに入ること。通常ＳＬＥＥＰ
*		しないでバッファを監視している場合有効？）
*	$ffff	相手は何もしなくて良いけど処理は終わったのか見るためのコマンド
*		-28が返ればまだ処理できていない事を表わします

*	そのスレッドの通信用バッファが書き込み可能であれば（バッファ内のＩＤ
*	が−１ならば）ＭＹ＿ＩＤとコマンドをセットし、u_buffからのデータを
*	u_lengthだけバッファアドレスに書き込み、u_lengthをセットします。
*	そのスレッドがＳＬＥＥＰ中であれば起こします。

*	$fffbのコマンドは特殊処理され指定のスレッドを起こすだけで、バッファの
*	ＩＤが−１でなくても良いし、その他のバッファも使用しません。

*	u_lengthがbuffのlengthより大きい場合、あるいは書き込み不可の場合
*	エラーとなります。
*	id error	=$ffff00?? ??=max id
*	length error	=$80?????? ??????=max length
*	書き込みエラー	= -28
*
*$fffe	*time=time_pr()
*	現在のタイマーのカウンター値を返します。ｌｏｎｇ値でｍａｘを超えると
*	０に戻りますので、そのまま前の値との引き算で時間がわかります。
*	１ミリ秒単位のカウンターです。

*$ffff	*void change_pr()
*	バックグランドタスクの自分の実行時間を放棄します
*	次のタスクに切り変わります。
*----------------------------------------------------------------------------
*バックグランドタスクの管理テーブル
*
*割り込みがくるたびに全てのカウンターが減算され０になったら処理されるが、
*ユーザー状態でない場合は切り変わらない、ＯＳ内部にいる時はＯＳから返る時に
*切り変わる。ＯＳ内部でも１部ｃｈａｎｇｅコールで切り替えているところがある。
*スーパーバイザー状態でＤＯＳコールを使わないプログラム実行中は、絶対切り変
*わらないので、注意するとともに、理解した上で利用すること。
*max_pro:
*	dc.w	32-1		スレッドｍａｘ−１の値
*cnt_pro:
*	dc.w	0		起動中のスレッド数−１の値
*process_adr:
*	dc.l	process_tbl	スレッドテーブルの先頭アドレス
*cur_process:
*	dc.l	process_tbl	現在実行中のスレッドテーブルアドレス
*
*process_tbl:
pro_nxt	equ	0	*dc.l next_ptr	(終わりは先頭につながる)
pro_flg	equ	4	*dc.b wait_flg	nomal=0 / wait=$ff
pro_cnt	equ	5	*dc.b counter 割り込みのたびに減算される(0で次のスレッドへ）
pro_max	equ	6	*dc.b max counter 用ワーク
pro_cmd	equ	7	*dc.b doscmd+1 用ワーク
pro_id	equ	8	*dc.l psp_id	プロセスＩＤ(0で未使用のスレッド）
pro_usp	equ	12	*dc.l	usp
pro_d70	equ	16	*dc.l	d0,d1,d2,d3,d4,d5,d6,d7
pro_a60	equ	48	*dc.l	a0,a1,a2,a3,a4,a5,a6
pro_sr	equ	76	*dc.w	flg(sr)
pro_pc	equ	78	*dc.l	pc
pro_ssp	equ	82	*dc.l	ssp
pro_dsf	equ	86	*dc.w	indosf
pro_dsp	equ	88	*dc.l	indosp
pro_buf	equ	92	*dc.l	buff
pro_nam	equ	96	*ds.b	16('name',0)
pro_wct	equ	112	*dc.l	0　ＳＬＥＥＰ時間残り（ミリ秒）
pro_mst	equ	116	*dc.l	memory 管理start
pro_med	equ	120	*dc.l	memory 管理end
pro_len	equ	124	*
*この他に各プロセスのｐｓｐ内のpspext /pspctc /psperr
* /pspt10 /pspt11 /pspt12 /pspt13 /pspt14も使用する
