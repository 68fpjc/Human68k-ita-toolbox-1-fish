■　Human68k による問題

・  SIGINT や SIGABORT を IGNORE できない

・  勝手にカレントディレクトリが変わることがある

・　長い引数並びをコマンドに渡すにはどうするか

　　　　（１）　２５５文字を超えたらエラーとする
　　　　（２）　２５６文字め以下は強制的に削除する
　　　　（３）　引数並びは環境変数で渡す
　　　　（４）　引数並びは環境変数で渡し、パラメータ行にも最初の２５５文字を置く
　　　　（５）　いたうシェル対応コマンドには（３）、それ以外の場合には（１）
　　　　（６）　いたうシェル対応コマンドには（４）、それ以外の場合には（１）

　　さらに（５）（６）では、起動するコマンドがいたうシェル対応コマンドであるかどうかを
　　識別しなければならない

　　　　（１）　起動コマンド名に特殊文字を付加して明示的に指示する（例　+ls *）
　　　　（２）　拡張子で判断する（たとえば、.XI .RI .ZI）
　　　　（３）　コマンドファイルの特定の位置に特定の文字列を組み込んでおく

・  argv も問題だぞ

・　クォート情報をコマンドに渡すにはどうするか

・　引数や環境変数の / をディレクトリの区切りとして解釈してくれないコマンドがある

・  子プロセスがシグナルを吸収してしまう

・  環境の継承の問題

　　１　シェルは親の環境をそのまま操作し、それを子プロセスに渡す

　　　　　　・　環境の大きさを設定できない
　　　　　　・　親の環境を変更することになるかも知れない
　　　　　　・　子プロセスにより変更される危険がある
　　　　　　・　シングルプロセスでなければならない

　　２　シェルは親の環境をそのまま操作し、そのコピーを子プロセスに渡す

　　　　　　・　環境の大きさを設定できない
　　　　　　・　親の環境を変更することになるかも知れない
　　　　　　・　子プロセスが、そのまたコピーを操作するのならばメモリを無駄に使うことになる
　　　　　　・　シングルプロセスでなければならない

　　３　シェルは親の環境をコピーしてから操作し、それを子プロセスに渡す

　　　　　　・　子プロセスにより変更される危険がある
　　　　　　・　シングルプロセスでなければならない

　　４　シェルは親の環境をコピーしてから操作し、それをまたコピーして子プロセスに渡す

　　　　　　・　子プロセスが、そのまたコピーを操作するのならばメモリを無駄に使うことになる

・　GETS を呼んだのでは、
　　　・　シグナルを検知できない
　　　・　文字数が２５５文字までに限定される
　　　・　エコーバックが標準エラー出力ではなく標準出力
　　　・　水平タブが ^I と表示されてしまう

・  -l name では / や /. /.. は存在しないことになる。

・  実行可能であるかどうかの識別をどうするか

・  子プロセスを起動した後にはカレント・ディレクトリを元に戻すべきか
    論理ドライブ交換機構やディレクトリのドライブ化機構が
    プロセス毎に独立した環境を構築することを妨げる

・  大きなシェル・スクリプト（sharファイルなど）は実行できない


■　Human68k へのインプリメンテーションの問題

・  履歴の検索文字列の大文字と小文字の区別をどうするか

・　ファイル名展開／完成では
	・  大文字と小文字を区別すべきか
	・  8文字以降のベース名も調べるべきか
	・  現実には存在しない /. と /.. を、存在するものとするか
	・  % で始まるエントリの展開を抑止すべきか
	・  hiddenファイルの展開を抑止すべきか

・  式ではファイル名の
	・  大文字と小文字を区別すべきか
	・  8文字以降のベース名も調べるべきか
	・  現実には存在しない /. と /.. を、存在するものとするか

・  home はドライブ名が無くてもいいか

・  Human 1.0 版ではサブシェルを除き $$ が常に 1 となる

・  シェル変数 shell の初期値は何とするか

・  #! に続くシェルを $PATH に従って検索するか、拡張子は補うか

・  ログイン・シェルであるかどうかの区別

・  ctty は CON と AUX だけ？

・  @: か .: か

・  /etc/passwd、/etc/termcap 等のドライブをどうするか

・  >>では^ZをEOF扱いとするか

・  ディレクトリを \ で区切ったパス名をファイル名完成機能で得ることができない

・  ~\\foo は A:/ita\foo になってしまう


■　csh の未熟さによる問題

・  履歴番号がオーバーフローしたらどうするか

・  パターンマッチングの仕様

・　ファイル名展開で . で始まるエントリも展開するスイッチを付けるか

・　echo の仕様はどうする

・  << を csh 仕様にするか sh 仕様にするか
	・ クオートされたターミネータのクオートは外すか
	・ プロンプトを出力するか
	・ << の終わりの印が入力されずに EOF となったときにエラーとすべきか

・  csh では << の文の中での置換の解析は通常と異なっている

・  csh では、マニュアルには<<の文の中でファイル名展開されると書いてあるが、
    実際には展開されない

・  csh ではマニュアルの記述とは異なり、0 で始まる引数も10進数になる

・  csh ではマニュアルの記述とは異なり、unsetenv でパターンマッチしない

・  csh ではマニュアルの記述とは異なり、!$ などは必ず直前のイベントのものとなる

・  csh ではマニュアルの記述とは異なり、$0 と $#name を : で修飾することができない

・  csh では !# の挙動がマニュアルと違うケースがある（バグ？）

・  csh では !{} や ${} の中に | や & などがあると不思議な展開をする（バグ？）

・  alias ls ls -CF としても、if 1 ls は置換されない


■　アルゴリズムの問題

・　制御構造をどう実現するか

・　履歴の行数をどうしよう。途中で変えてもバッファの大きさは変えられないし、
　　必要な行数をバッファに溜め込めない場合もある。

・  展開文字列のクオート

